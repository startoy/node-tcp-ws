#!/usr/bin/env node

const app = require('../app');
const http = require('http');
const server = http.createServer(app);
const websocket = require('../core/io.server');
const io = websocket.io;
io.attach(server);

require('../core/tcp.server')(io);

let log = console;

let http_port = normalizePort(process.env.HTTP_PORT || '3000');
app.set('port', http_port);

server.listen(http_port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(value) {
  let port = parseInt(value, 10);

  if (isNaN(port)) {
    return value;
  }

  if (port >= 0) {
    return port;
  }
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof http_port === 'string' ? 'Pipe ' + http_port : 'Port ' + http_port;
  
  // Handle specific listen errors with friendly messages
  log.log('Error occure ' + error);
  switch (error.code) {
    case 'EACCES':
      log.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      log.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  log.info('[x] Process listening on *:' + bind);
}
